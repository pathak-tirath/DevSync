    const encryptedPassword = await bcrypt.hash(password, 10);
 -  Here "10" is the salt -- Basically, it is the number of iteration that bcrypt does for encrypting the password. The more the numbers, the stronger the encryption password.


 - next() function usage -> https://expressjs.com/en/guide/writing-middleware.html#:~:text=If%20the%20current%20middleware%20function%20does%20not%20end%20the%20request%2Dresponse%20cycle%2C%20it%20must%20call%20next()%20to%20pass%20control%20to%20the%20next%20middleware%20function.%20Otherwise%2C%20the%20request%20will%20be%20left%20hanging.

 - You can assign more than one middlewares. 
    for example:- app.get("/profile", one,two, async (req: CustomRequest, res) => {...})

    - Just that if you pass a res in any one of them, it will send the response back and terminate there and throw an error "Cannot set headers after they are sent to client"

    
    userSchema.methods.validatePassword = async function (password:string) {
      await bcrypt.compare(
         password,
         this?.password as string
       );
      }

      -- If the methods are like the above ones, which are closely tied to user schema like method to check if the password is valid or not and for assigning a user a JWT token for authentication, so use the custom methods for advantages such as better encapsulation, clean code etc. 


      - Here in the userAuth, the server basically verifies the token it receives from the user, matches it, whether it is correct token or not. Additionally, based on _id, from the extracted token, it finds it in the DB and returns the user of the _id



      Q. Difference b/w Schema, model and document
      
      Schema → The blueprint (what the house should look like)
      Model → The contractor who reads the blueprint and builds actual houses
      Document → The house built from the model (and based on the schema)


      mongoose.model: Understands the schema and knows how to:

      - Create documents (using new keyword like new User(...))
      - Validate data
      - Connect to a specific MongoDB collection
      - Run queries like .find(), .save(), .deleteOne(), etc.


      - pre in mongoose are basically pre-middleware or pre-hooks, which are executed before a specific operation. Like pre("save"), executed before the save function is called.